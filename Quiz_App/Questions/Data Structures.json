[
  {
    "id": 1,
    "question": "What is the time complexity of searching for an element in a binary search tree?",
    "optionA": "O(1)",
    "optionB": "O(n)",
    "optionC": "O(log n)",
    "optionD": "O(n log n)",
    "answer": "O(log n)"
  },
  {
    "id": 2,
    "question": "Which data structure is used to implement recursion?",
    "optionA": "Queue",
    "optionB": "Stack",
    "optionC": "Array",
    "optionD": "Linked List",
    "answer": "Stack"
  },
  {
    "id": 3,
    "question": "What is a binary tree?",
    "optionA": "A tree with at most two children per node",
    "optionB": "A tree with exactly three children per node",
    "optionC": "A tree with multiple roots",
    "optionD": "None of the above",
    "answer": "A tree with at most two children per node"
  },
  {
    "id": 4,
    "question": "What is the main advantage of a linked list over an array?",
    "optionA": "Efficient random access",
    "optionB": "Dynamic size and ease of insertion/deletion",
    "optionC": "Lower memory usage",
    "optionD": "All of the above",
    "answer": "Dynamic size and ease of insertion/deletion"
  },
  {
    "id": 5,
    "question": "Which traversal method processes the root before its child nodes?",
    "optionA": "Inorder",
    "optionB": "Preorder",
    "optionC": "Postorder",
    "optionD": "Level order",
    "answer": "Preorder"
  },
  {
    "id": 6,
    "question": "What is the worst-case time complexity of quicksort?",
    "optionA": "O(n^2)",
    "optionB": "O(n log n)",
    "optionC": "O(log n)",
    "optionD": "O(n)",
    "answer": "O(n^2)"
  },
  {
    "id": 7,
    "question": "Which data structure is used for breadth-first traversal of a graph?",
    "optionA": "Stack",
    "optionB": "Queue",
    "optionC": "Array",
    "optionD": "Hash Table",
    "answer": "Queue"
  },
  {
    "id": 8,
    "question": "What is a circular queue?",
    "optionA": "A queue implemented using linked lists",
    "optionB": "A queue where the last position connects back to the first",
    "optionC": "A queue with only one end",
    "optionD": "None of the above",
    "answer": "A queue where the last position connects back to the first"
  },
  {
    "id": 9,
    "question": "Which of the following data structures is not linear?",
    "optionA": "Array",
    "optionB": "Linked List",
    "optionC": "Binary Tree",
    "optionD": "Queue",
    "answer": "Binary Tree"
  },
  {
    "id": 10,
    "question": "What is a priority queue?",
    "optionA": "A queue that allows insertion only at the rear",
    "optionB": "A queue where elements have priority and are dequeued based on priority",
    "optionC": "A queue implemented using a stack",
    "optionD": "None of the above",
    "answer": "A queue where elements have priority and are dequeued based on priority"
  },
  {
    "id": 11,
    "question": "What is a self-balancing binary search tree?",
    "optionA": "A binary tree that maintains balance dynamically",
    "optionB": "A binary tree with all leaves at the same level",
    "optionC": "A binary tree balanced at creation",
    "optionD": "None of the above",
    "answer": "A binary tree that maintains balance dynamically"
  },
  {
    "id": 12,
    "question": "What is the maximum number of edges in a simple graph with n vertices?",
    "optionA": "n",
    "optionB": "n^2",
    "optionC": "n(n-1)",
    "optionD": "n(n-1)/2",
    "answer": "n(n-1)/2"
  },
  {
    "id": 13,
    "question": "Which operation is performed first in a min-heap?",
    "optionA": "Delete maximum",
    "optionB": "Insert element",
    "optionC": "Extract minimum",
    "optionD": "None of the above",
    "answer": "Extract minimum"
  },
  {
    "id": 14,
    "question": "Which traversal processes the left subtree, root, and then right subtree?",
    "optionA": "Inorder",
    "optionB": "Preorder",
    "optionC": "Postorder",
    "optionD": "Level order",
    "answer": "Inorder"
  },
  {
    "id": 15,
    "question": "What is a graph?",
    "optionA": "A collection of points and lines connecting some or all of them",
    "optionB": "A collection of trees",
    "optionC": "A collection of arrays",
    "optionD": "A matrix representation",
    "answer": "A collection of points and lines connecting some or all of them"
  },
  {
    "id": 16,
    "question": "What is a hash table used for?",
    "optionA": "Sorting data",
    "optionB": "Storing data as key-value pairs for fast retrieval",
    "optionC": "Traversing trees",
    "optionD": "None of the above",
    "answer": "Storing data as key-value pairs for fast retrieval"
  },
  {
    "id": 17,
    "question": "Which of the following is not a type of tree?",
    "optionA": "Binary tree",
    "optionB": "B-tree",
    "optionC": "AVL tree",
    "optionD": "Array tree",
    "answer": "Array tree"
  },
  {
    "id": 18,
    "question": "Which data structure is best for implementing an undo operation?",
    "optionA": "Queue",
    "optionB": "Stack",
    "optionC": "Linked List",
    "optionD": "Hash Table",
    "answer": "Stack"
  },
  {
    "id": 19,
    "question": "What is the height of a balanced binary tree with n nodes?",
    "optionA": "O(n)",
    "optionB": "O(log n)",
    "optionC": "O(n^2)",
    "optionD": "None of the above",
    "answer": "O(log n)"
  },
  {
    "id": 20,
    "question": "What is the adjacency matrix representation of a graph?",
    "optionA": "A list of lists to store adjacent vertices",
    "optionB": "A matrix that shows edge presence between vertices",
    "optionC": "A matrix for shortest path computation",
    "optionD": "None of the above",
    "answer": "A matrix that shows edge presence between vertices"
  }
]
